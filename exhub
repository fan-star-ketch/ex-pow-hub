-- SpeedEX Hub (Mobile + PC Friendly)
-- Put this in StarterGui as a LocalScript

local Players = game:GetService("Players")
local UserInputService = game:GetService("UserInputService")

local player = Players.LocalPlayer
local character = player.Character or player.CharacterAdded:Wait()
local humanoid = character:WaitForChild("Humanoid")

-- SETTINGS
local DEFAULT_SPEED = 16
local MAX_SPEED = 100

-- GUI
local screenGui = Instance.new("ScreenGui")
screenGui.Name = "SpeedEXHub"
screenGui.ResetOnSpawn = false
screenGui.Parent = player:WaitForChild("PlayerGui")

-- Main Frame
local mainFrame = Instance.new("Frame")
mainFrame.Size = UDim2.new(0, 350, 0, 250)
mainFrame.Position = UDim2.new(0.5, -175, 0.5, -125)
mainFrame.AnchorPoint = Vector2.new(0.5, 0.5)
mainFrame.BackgroundColor3 = Color3.fromRGB(20, 20, 25)
mainFrame.BorderSizePixel = 0
mainFrame.Visible = false
mainFrame.Parent = screenGui
Instance.new("UICorner", mainFrame).CornerRadius = UDim.new(0, 8)

-- Title Bar
local titleBar = Instance.new("Frame", mainFrame)
titleBar.Size = UDim2.new(1, 0, 0, 32)
titleBar.BackgroundColor3 = Color3.fromRGB(15, 15, 20)
titleBar.BorderSizePixel = 0
Instance.new("UICorner", titleBar).CornerRadius = UDim.new(0, 8)

local title = Instance.new("TextLabel", titleBar)
title.Size = UDim2.new(1, -40, 1, 0)
title.Position = UDim2.new(0, 10, 0, 0)
title.BackgroundTransparency = 1
title.Text = "SpeedEX Hub"
title.TextColor3 = Color3.fromRGB(220, 220, 220)
title.Font = Enum.Font.GothamBold
title.TextSize = 16
title.TextXAlignment = Enum.TextXAlignment.Left

local closeButton = Instance.new("TextButton", titleBar)
closeButton.Size = UDim2.new(0, 32, 0, 32)
closeButton.Position = UDim2.new(1, -32, 0, 0)
closeButton.BackgroundTransparency = 1
closeButton.Text = "X"
closeButton.TextColor3 = Color3.fromRGB(220, 220, 220)
closeButton.Font = Enum.Font.GothamBold
closeButton.TextSize = 16

-- Dragging main window
do
	local dragStart, startPos
	local function update(input)
		local delta = input.Position - dragStart
		mainFrame.Position = UDim2.new(
			startPos.X.Scale, startPos.X.Offset + delta.X,
			startPos.Y.Scale, startPos.Y.Offset + delta.Y
		)
	end
	titleBar.InputBegan:Connect(function(input)
		if input.UserInputType == Enum.UserInputType.MouseButton1 or input.UserInputType == Enum.UserInputType.Touch then
			dragStart, startPos = input.Position, mainFrame.Position
			local conn
			conn = input.Changed:Connect(function()
				if input.UserInputState == Enum.UserInputState.End then
					dragStart = nil
					conn:Disconnect()
				end
			end)
		end
	end)
	titleBar.InputChanged:Connect(function(input)
		if (input.UserInputType == Enum.UserInputType.MouseMovement or input.UserInputType == Enum.UserInputType.Touch) and dragStart then
			update(input)
		end
	end)
end

-- Content
local contentFrame = Instance.new("Frame", mainFrame)
contentFrame.Size = UDim2.new(1, -20, 1, -52)
contentFrame.Position = UDim2.new(0, 10, 0, 42)
contentFrame.BackgroundTransparency = 1

-- Label
local speedLabel = Instance.new("TextLabel", contentFrame)
speedLabel.Size = UDim2.new(1, 0, 0, 24)
speedLabel.Position = UDim2.new(0, 0, 0, 10)
speedLabel.BackgroundTransparency = 1
speedLabel.Text = "WALKSPEED"
speedLabel.TextColor3 = Color3.fromRGB(170, 170, 180)
speedLabel.Font = Enum.Font.Gotham
speedLabel.TextSize = 14
speedLabel.TextXAlignment = Enum.TextXAlignment.Left

-- Slider
local speedSlider = Instance.new("Frame", contentFrame)
speedSlider.Size = UDim2.new(1, 0, 0, 6)
speedSlider.Position = UDim2.new(0, 0, 0, 40)
speedSlider.BackgroundColor3 = Color3.fromRGB(50, 50, 60)
speedSlider.BorderSizePixel = 0
Instance.new("UICorner", speedSlider).CornerRadius = UDim.new(1, 0)

local sliderFill = Instance.new("Frame", speedSlider)
sliderFill.BackgroundColor3 = Color3.fromRGB(0, 162, 255)
sliderFill.Size = UDim2.new(0, 0, 1, 0)
Instance.new("UICorner", sliderFill).CornerRadius = UDim.new(1, 0)

local sliderButton = Instance.new("TextButton", speedSlider)
sliderButton.Size = UDim2.new(0, 20, 0, 20)
sliderButton.BackgroundColor3 = Color3.fromRGB(240, 240, 240)
sliderButton.BorderSizePixel = 0
sliderButton.Text = ""
sliderButton.AnchorPoint = Vector2.new(0.5, 0.5)
sliderButton.Position = UDim2.new(0, 0, 0.5, 0)
Instance.new("UICorner", sliderButton).CornerRadius = UDim.new(1, 0)

-- Speed Value
local speedValue = Instance.new("TextLabel", contentFrame)
speedValue.Size = UDim2.new(1, 0, 0, 24)
speedValue.Position = UDim2.new(0, 0, 0, 70)
speedValue.BackgroundTransparency = 1
speedValue.Text = tostring(DEFAULT_SPEED)
speedValue.TextColor3 = Color3.fromRGB(220, 220, 220)
speedValue.Font = Enum.Font.GothamBold
speedValue.TextSize = 18
speedValue.TextXAlignment = Enum.TextXAlignment.Center

-- Buttons
local buttonContainer = Instance.new("Frame", contentFrame)
buttonContainer.Size = UDim2.new(1, 0, 0, 40)
buttonContainer.Position = UDim2.new(0, 0, 1, -50)
buttonContainer.BackgroundTransparency = 1

local resetButton = Instance.new("TextButton", buttonContainer)
resetButton.Size = UDim2.new(0.45, 0, 1, 0)
resetButton.Position = UDim2.new(0.55, 0, 0, 0)
resetButton.BackgroundColor3 = Color3.fromRGB(60, 60, 70)
resetButton.Text = "RESET"
resetButton.TextColor3 = Color3.fromRGB(220, 220, 220)
resetButton.Font = Enum.Font.Gotham
resetButton.TextSize = 14
Instance.new("UICorner", resetButton).CornerRadius = UDim.new(0, 4)

-- Toggle Button
local toggleButton = Instance.new("TextButton", screenGui)
toggleButton.Size = UDim2.new(0, 40, 0, 40)
toggleButton.Position = UDim2.new(0, 10, 0, 10)
toggleButton.BackgroundColor3 = Color3.fromRGB(0, 162, 255)
toggleButton.Text = "S"
toggleButton.TextColor3 = Color3.fromRGB(255, 255, 255)
toggleButton.Font = Enum.Font.GothamBold
toggleButton.TextSize = 16
Instance.new("UICorner", toggleButton).CornerRadius = UDim.new(0, 8)

-- SLIDER LOGIC
local isDragging = false

local function updateSlider(percent)
	percent = math.clamp(percent, 0, 1)
	local speed = math.floor(percent * MAX_SPEED)
	speedValue.Text = tostring(speed)
	sliderFill.Size = UDim2.new(percent, 0, 1, 0)
	sliderButton.Position = UDim2.new(percent, 0, 0.5, 0)
	humanoid.WalkSpeed = speed -- live update
end

local function getPercentFromX(x)
	local rel = math.clamp(x - speedSlider.AbsolutePosition.X, 0, speedSlider.AbsoluteSize.X)
	return rel / speedSlider.AbsoluteSize.X
end

-- Mouse + Touch handling
local function beginDrag(x)
	local p = getPercentFromX(x)
	updateSlider(p)
	isDragging = true
end

local function endDrag()
	isDragging = false
end

sliderButton.InputBegan:Connect(function(input)
	if input.UserInputType == Enum.UserInputType.MouseButton1 or input.UserInputType == Enum.UserInputType.Touch then
		beginDrag(input.Position.X)
	end
end)

speedSlider.InputBegan:Connect(function(input)
	if input.UserInputType == Enum.UserInputType.MouseButton1 or input.UserInputType == Enum.UserInputType.Touch then
		beginDrag(input.Position.X)
	end
end)

UserInputService.InputChanged:Connect(function(input)
	if isDragging and (input.UserInputType == Enum.UserInputType.MouseMovement or input.UserInputType == Enum.UserInputType.Touch) then
		local p = getPercentFromX(input.Position.X)
		updateSlider(p)
	end
end)

UserInputService.InputEnded:Connect(function(input)
	if input.UserInputType == Enum.UserInputType.MouseButton1 or input.UserInputType == Enum.UserInputType.Touch then
		endDrag()
	end
end)

-- BUTTONS
resetButton.MouseButton1Click:Connect(function()
	updateSlider(DEFAULT_SPEED / MAX_SPEED)
end)

closeButton.MouseButton1Click:Connect(function()
	mainFrame.Visible = false
end)

toggleButton.MouseButton1Click:Connect(function()
	mainFrame.Visible = not mainFrame.Visible
end)

-- INIT
updateSlider(DEFAULT_SPEED / MAX_SPEED)
humanoid.WalkSpeed = DEFAULT_SPEED

-- Hotkey (RightShift for PC)
UserInputService.InputBegan:Connect(function(input, gpe)
	if not gpe and input.KeyCode == Enum.KeyCode.RightShift then
		mainFrame.Visible = not mainFrame.Visible
	end
end)
