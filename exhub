-- SpeedEX Hub - Mobile + PC Friendly (LocalScript for StarterGui)
-- Paste this as a LocalScript inside StarterGui

local Players = game:GetService("Players")
local UserInputService = game:GetService("UserInputService")
local RunService = game:GetService("RunService")

local player = Players.LocalPlayer
local playerGui = player:WaitForChild("PlayerGui")

-- Settings
local DEFAULT_SPEED = 16
local MAX_SPEED = 100

-- Keep humanoid up-to-date (handles respawn)
local humanoid
local function onCharacterAdded(char)
	humanoid = char:FindFirstChildOfClass("Humanoid")
	if not humanoid then
		-- wait for humanoid but don't block forever
		humanoid = char:WaitForChild("Humanoid")
	end
end
local character = player.Character or player.CharacterAdded:Wait()
onCharacterAdded(character)
player.CharacterAdded:Connect(onCharacterAdded)

-- Helper: safe set WalkSpeed
local function safeSetWalkSpeed(value)
	if typeof(value) ~= "number" then return end
	if value < 0 then value = 0 end
	if value > MAX_SPEED then value = MAX_SPEED end
	if humanoid and humanoid.Parent then
		-- protect in pcall in case of read-only or other errors
		pcall(function() humanoid.WalkSpeed = value end)
	end
end

-- Create ScreenGui
local screenGui = Instance.new("ScreenGui")
screenGui.Name = "SpeedEXHub"
screenGui.ResetOnSpawn = false
screenGui.Parent = playerGui

-- MAIN WINDOW
local mainFrame = Instance.new("Frame")
mainFrame.Name = "MainFrame"
mainFrame.Size = UDim2.new(0, 360, 0, 260)
mainFrame.Position = UDim2.new(0.5, -180, 0.5, -130)
mainFrame.AnchorPoint = Vector2.new(0.5, 0.5)
mainFrame.BackgroundColor3 = Color3.fromRGB(20,20,25)
mainFrame.BorderSizePixel = 0
mainFrame.Parent = screenGui
mainFrame.Visible = false
local mc = Instance.new("UICorner", mainFrame)
mc.CornerRadius = UDim.new(0,10)

-- TITLE BAR (drag)
local titleBar = Instance.new("Frame", mainFrame)
titleBar.Size = UDim2.new(1,0,0,36)
titleBar.BackgroundColor3 = Color3.fromRGB(15,15,20)
titleBar.BorderSizePixel = 0
local tc = Instance.new("UICorner", titleBar)
tc.CornerRadius = UDim.new(0,10)

local titleLabel = Instance.new("TextLabel", titleBar)
titleLabel.Size = UDim2.new(1,-40,1,0)
titleLabel.Position = UDim2.new(0,12,0,0)
titleLabel.BackgroundTransparency = 1
titleLabel.Text = "SpeedEX Hub"
titleLabel.TextColor3 = Color3.fromRGB(230,230,230)
titleLabel.Font = Enum.Font.GothamBold
titleLabel.TextSize = 16
titleLabel.TextXAlignment = Enum.TextXAlignment.Left

local closeBtn = Instance.new("TextButton", titleBar)
closeBtn.Size = UDim2.new(0,36,0,36)
closeBtn.Position = UDim2.new(1,-36,0,0)
closeBtn.BackgroundTransparency = 1
closeBtn.Text = "X"
closeBtn.Font = Enum.Font.GothamBold
closeBtn.TextColor3 = Color3.fromRGB(230,230,230)
closeBtn.TextSize = 16

-- Toggle button (always visible)
local toggleBtn = Instance.new("TextButton", screenGui)
toggleBtn.Size = UDim2.new(0,44,0,44)
toggleBtn.Position = UDim2.new(0,12,0,12)
toggleBtn.BackgroundColor3 = Color3.fromRGB(0,162,255)
toggleBtn.Text = "S"
toggleBtn.Font = Enum.Font.GothamBold
toggleBtn.TextSize = 18
toggleBtn.TextColor3 = Color3.fromRGB(255,255,255)
local tbcorner = Instance.new("UICorner", toggleBtn)
tbcorner.CornerRadius = UDim.new(0,10)

-- Dragging main window (supports touch & mouse)
do
	local dragging = false
	local dragStartPos, startPos
	local function update(input)
		if not dragging or not dragStartPos then return end
		local delta = input.Position - dragStartPos
		mainFrame.Position = UDim2.new(
			startPos.X.Scale, startPos.X.Offset + delta.X,
			startPos.Y.Scale, startPos.Y.Offset + delta.Y
		)
	end

	titleBar.InputBegan:Connect(function(input)
		if input.UserInputType == Enum.UserInputType.MouseButton1 or input.UserInputType == Enum.UserInputType.Touch then
			dragging = true
			dragStartPos = input.Position
			startPos = mainFrame.Position
			-- disconnect on end
			local conn
			conn = input.Changed:Connect(function()
				if input.UserInputState == Enum.UserInputState.End then
					dragging = false
					dragStartPos = nil
					conn:Disconnect()
				end
			end)
		end
	end)

	titleBar.InputChanged:Connect(function(input)
		if (input.UserInputType == Enum.UserInputType.MouseMovement or input.UserInputType == Enum.UserInputType.Touch) and dragging then
			update(input)
		end
	end)
end

-- CONTENT
local content = Instance.new("Frame", mainFrame)
content.Size = UDim2.new(1,-24,1,-60)
content.Position = UDim2.new(0,12,0,44)
content.BackgroundTransparency = 1

-- Label
local lbl = Instance.new("TextLabel", content)
lbl.Size = UDim2.new(1,0,0,22)
lbl.Position = UDim2.new(0,0,0,0)
lbl.BackgroundTransparency = 1
lbl.Text = "WALKSPEED"
lbl.TextColor3 = Color3.fromRGB(180,180,190)
lbl.Font = Enum.Font.Gotham
lbl.TextSize = 14
lbl.TextXAlignment = Enum.TextXAlignment.Left

-- Slider bar
local sliderBar = Instance.new("Frame", content)
sliderBar.Size = UDim2.new(1,0,0,8)
sliderBar.Position = UDim2.new(0,0,0,34)
sliderBar.BackgroundColor3 = Color3.fromRGB(48,48,56)
sliderBar.BorderSizePixel = 0
local sliderCorner = Instance.new("UICorner", sliderBar); sliderCorner.CornerRadius = UDim.new(1,0)

local sliderFill = Instance.new("Frame", sliderBar)
sliderFill.Size = UDim2.new(0,0,1,0)
sliderFill.BackgroundColor3 = Color3.fromRGB(0,162,255)
local fillCorner = Instance.new("UICorner", sliderFill); fillCorner.CornerRadius = UDim.new(1,0)

local handle = Instance.new("ImageButton", sliderBar)
handle.Size = UDim2.new(0,28,0,28)
handle.AnchorPoint = Vector2.new(0.5,0.5)
handle.Position = UDim2.new(0,0,0.5,0)
handle.BackgroundTransparency = 1
handle.Image = "" -- use simple rectangle via background if you like; keep blank for speed
local handleBg = Instance.new("Frame", handle)
handleBg.Size = UDim2.new(1,-4,1,-4)
handleBg.Position = UDim2.new(0,2,0,2)
handleBg.BackgroundColor3 = Color3.fromRGB(242,242,242)
handleBg.BorderSizePixel = 0
handleBg.AnchorPoint = Vector2.new(0,0)
local handleCorner = Instance.new("UICorner", handleBg); handleCorner.CornerRadius = UDim.new(1,0)

-- Value display + editable textbox (mobile friendly)
local valueFrame = Instance.new("Frame", content)
valueFrame.Size = UDim2.new(1,0,0,36)
valueFrame.Position = UDim2.new(0,0,0,64)
valueFrame.BackgroundTransparency = 1

local valueLabel = Instance.new("TextLabel", valueFrame)
valueLabel.Size = UDim2.new(0.5,0,1,0)
valueLabel.Position = UDim2.new(0,0,0,0)
valueLabel.BackgroundTransparency = 1
valueLabel.Text = "Speed:"
valueLabel.Font = Enum.Font.Gotham
valueLabel.TextSize = 14
valueLabel.TextColor3 = Color3.fromRGB(200,200,200)
valueLabel.TextXAlignment = Enum.TextXAlignment.Left

local valueBox = Instance.new("TextBox", valueFrame)
valueBox.Size = UDim2.new(0.5,-4,1,0)
valueBox.Position = UDim2.new(0.5,4,0,0)
valueBox.BackgroundColor3 = Color3.fromRGB(30,30,36)
valueBox.TextColor3 = Color3.fromRGB(230,230,230)
valueBox.ClearTextOnFocus = false
valueBox.PlaceholderText = tostring(DEFAULT_SPEED)
valueBox.Text = tostring(DEFAULT_SPEED)
valueBox.Font = Enum.Font.GothamBold
valueBox.TextSize = 16
valueBox.TextXAlignment = Enum.TextXAlignment.Center
local vbCorner = Instance.new("UICorner", valueBox); vbCorner.CornerRadius = UDim.new(0,6)

-- Buttons row (Default, Max, Reset, Apply)
local btnRow = Instance.new("Frame", content)
btnRow.Size = UDim2.new(1,0,0,40)
btnRow.Position = UDim2.new(0,0,1,-44)
btnRow.BackgroundTransparency = 1

local function makeBtn(text, posScale)
	local b = Instance.new("TextButton", btnRow)
	b.Size = UDim2.new(0.22,0,1,0)
	b.Position = UDim2.new(posScale, 8*(posScale*4), 0, 0) -- spaced roughly
	b.Text = text
	b.Font = Enum.Font.GothamBold
	b.TextSize = 14
	b.TextColor3 = Color3.fromRGB(230,230,230)
	b.BackgroundColor3 = Color3.fromRGB(60,60,70)
	local c = Instance.new("UICorner", b); c.CornerRadius = UDim.new(0,6)
	return b
end

local btnDefault = makeBtn("Default", 0)
local btnPlus = makeBtn("+10", 0.26)
local btnMinus = makeBtn("-10", 0.52)
local btnMax = makeBtn("Max", 0.78)

-- state
local dragging = false

-- convert number -> percent [0,1]
local function speedToPercent(speed)
	speed = tonumber(speed) or DEFAULT_SPEED
	return math.clamp(speed / MAX_SPEED, 0, 1)
end

-- convert percent -> speed integer for display
local function percentToSpeed(p)
	return math.floor(math.clamp(p,0,1) * MAX_SPEED + 0.5)
end

-- Update slider visuals & optionally set walk speed (liveFlag)
local function updateSlider(percent, liveFlag)
	percent = math.clamp(percent, 0, 1)
	sliderFill.Size = UDim2.new(percent, 0, 1, 0)
	handle.Position = UDim2.new(percent, 0, 0.5, 0)
	local speed = percentToSpeed(percent)
	valueBox.Text = tostring(speed)
	if liveFlag then
		safeSetWalkSpeed(speed)
	end
end

-- compute percent from screen X (pointer)
local function percentFromX(x)
	local pos = sliderBar.AbsolutePosition
	local size = sliderBar.AbsoluteSize
	if size.X <= 0 then return 0 end
	local rel = math.clamp(x - pos.X, 0, size.X)
	return rel / size.X
end

-- begin drag with initial X
local function beginDragFromX(x)
	dragging = true
	local p = percentFromX(x)
	-- live update while dragging
	updateSlider(p, true)
end

-- end drag
local function endDrag()
	dragging = false
end

-- Input handlers (touch + mouse)
handle.InputBegan:Connect(function(input)
	if input.UserInputType == Enum.UserInputType.MouseButton1 or input.UserInputType == Enum.UserInputType.Touch then
		beginDragFromX(input.Position.X)
		-- track end on input changed end
		local conn
		conn = input.Changed:Connect(function()
			if input.UserInputState == Enum.UserInputState.End then
				endDrag()
				conn:Disconnect()
			end
		end)
	end
end)

sliderBar.InputBegan:Connect(function(input)
	if input.UserInputType == Enum.UserInputType.MouseButton1 or input.UserInputType == Enum.UserInputType.Touch then
		beginDragFromX(input.Position.X)
		local conn
		conn = input.Changed:Connect(function()
			if input.UserInputState == Enum.UserInputState.End then
				endDrag()
				conn:Disconnect()
			end
		end)
	end
end)

-- Global input changed for mouse movement / touch move
UserInputService.InputChanged:Connect(function(input)
	if not dragging then return end
	if input.UserInputType == Enum.UserInputType.MouseMovement or input.UserInputType == Enum.UserInputType.Touch then
		local x = input.Position.X
		local p = percentFromX(x)
		updateSlider(p, true)
	end
end)

-- For safety also listen to InputEnded (covers some edge cases)
UserInputService.InputEnded:Connect(function(input)
	if input.UserInputType == Enum.UserInputType.MouseButton1 or input.UserInputType == Enum.UserInputType.Touch then
		endDrag()
	end
end)

-- Buttons functionality
btnDefault.MouseButton1Click:Connect(function()
	local p = speedToPercent(DEFAULT_SPEED)
	updateSlider(p, true)
end)

btnMax.MouseButton1Click:Connect(function()
	local p = speedToPercent(MAX_SPEED)
	updateSlider(p, true)
end)

btnPlus.MouseButton1Click:Connect(function()
	local cur = tonumber(valueBox.Text) or percentToSpeed(sliderFill.Size.X.Scale)
	cur = math.min(MAX_SPEED, cur + 10)
	updateSlider(speedToPercent(cur), true)
end)

btnMinus.MouseButton1Click:Connect(function()
	local cur = tonumber(valueBox.Text) or percentToSpeed(sliderFill.Size.X.Scale)
	cur = math.max(0, cur - 10)
	updateSlider(speedToPercent(cur), true)
end)

-- valueBox commits on Enter or focus lost
valueBox.FocusLost:Connect(function(enterPressed)
	local raw = valueBox.Text or ""
	local num = tonumber(raw)
	if num then
		num = math.clamp(math.floor(num + 0.5), 0, MAX_SPEED)
		updateSlider(speedToPercent(num), true)
	else
		-- restore displayed value
		local cur = percentToSpeed(sliderFill.Size.X.Scale)
		valueBox.Text = tostring(cur)
	end
end)

-- Close & Toggle
closeBtn.MouseButton1Click:Connect(function()
	mainFrame.Visible = false
end)

toggleBtn.MouseButton1Click:Connect(function()
	mainFrame.Visible = not mainFrame.Visible
end)

-- Hotkey (PC)
UserInputService.InputBegan:Connect(function(input, gpe)
	if gpe then return end
	if input.KeyCode == Enum.KeyCode.RightShift or input.KeyCode == Enum.KeyCode.LeftShift then
		mainFrame.Visible = not mainFrame.Visible
	end
end)

-- Initialize UI values
updateSlider(speedToPercent(DEFAULT_SPEED), true)
safeSetWalkSpeed(DEFAULT_SPEED)

-- Ensure slider visuals are correct once UI has rendered
local renderedConn
renderedConn = RunService.Heartbeat:Connect(function()
	if sliderBar.AbsoluteSize.X > 0 then
		updateSlider(speedToPercent(tonumber(valueBox.Text) or DEFAULT_SPEED), true)
		renderedConn:Disconnect()
	end
end)
